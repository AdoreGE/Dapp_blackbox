var Tx = require('ethereumjs-tx')
var Web3 = require("web3");
var  MyConstant= require('../Constant/constant.js')
web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:7545"));


const cloudAddress = MyConstant.cloudAddress
const cloudPrivateKey = MyConstant.cloudPrivateKey
const SearchContract = new web3.eth.Contract(MyConstant.SearchABI, MyConstant.SearchAddress)


// // 1. Deploy Search contract
// web3.eth.getTransactionCount(cloudAddress, (err, txCount)=>{
//     const data = '0x60806040526000805534801561001457600080fd5b5061069d806100246000396000f3fe608060405260043610610067576000357c01000000000000000000000000000000000000000000000000000000009004806338cc48311461006c5780634bd7fb9b146100d85780639f2c39b414610131578063a8d1e5c714610196578063be1c766b146101ce575b600080fd5b34801561007857600080fd5b506100816101f9565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156100c45780820151818401526020810190506100a9565b505050509050019250505060405180910390f35b3480156100e457600080fd5b5061011b600480360360408110156100fb57600080fd5b810190808035906020019092919080359060200190929190505050610287565b6040518082815260200191505060405180910390f35b34801561013d57600080fd5b506101946004803603606081101561015457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506102a7565b005b6101cc600480360360408110156101ac57600080fd5b81019080803590602001909291908035906020019092919050505061031d565b005b3480156101da57600080fd5b506101e361044e565b6040518082815260200191505060405180910390f35b6060600380548060200260200160405190810160405280929190818152602001828054801561027d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610233575b5050505050905090565b60008183131561029b5781830390506102a1565b82820390505b92915050565b60018390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061031883838361045b565b505050565b600060038161032c91906105e8565b5060008090505b600280549050811015610449576001610362846004600085815260200190815260200160002060010154610287565b131580156103905750600161038d836004600085815260200190815260200160002060020154610287565b13155b1561043c5760036002828154811015156103a657fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b8080600101915050610333565b505050565b6000600280549050905090565b610463610614565b6060604051908101604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381525090506002819080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050506000600280549050905060026001820381548110151561053f57fe5b9060005260206000209060030201600460006001840381526020019081526020016000206000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018201548160010155600282015481600201559050505050505050565b81548183558181111561060f5781836000526020600020918201910161060e919061064c565b5b505050565b606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b61066e91905b8082111561066a576000816000905550600101610652565b5090565b9056fea165627a7a72305820287cd09abcb6cfb17eddc811df0dc1f1244b710c8cfb818cd77c881401cc8e8c0029'
//     const txObject = {
//         from : cloudAddress,
//         nonce : web3.utils.toHex(txCount),
//         gasLimit: web3.utils.toHex(1000000),
//         gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),

//         data : data
//     }
//     //Sign the transaction
//     const tx = new Tx(txObject)
//     tx.sign(cloudPrivateKey)

//     const serializedTx = tx.serialize()
//     const raw = '0x' + serializedTx.toString('hex')

//     //Boradcast the transaction
//     web3.eth.sendSignedTransaction(raw, (err, txHash)=>{
//         console.log('err: ', err, 'receipt: ', txHash)
//         //Use this txHash to find the contract on Etherscan!
//     })
// })
    
// SearchContract.methods.setEvidence(cloudAddress, 4,3).send({
//     from:cloudAddress,
//     gasLimit: web3.utils.toHex(1000000)
// }, (err, result)=>{
//     console.log(result)
// })

// 검색 후 결과 보기
SearchContract.methods.runSearching(3,3).send({
    from:MyConstant.dashcamAddress5,
    gasLimit: web3.utils.toHex(1000000)
}, (err, result)=>{
    console.log(result)
    SearchContract.methods.getAddress().call().then((result)=>{
        console.log('addresses: ',result)
    })
    
    SearchContract.methods.getLength().call().then((result)=>{
            console.log('length: ',result)
    })
})

// 